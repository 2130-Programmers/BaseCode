// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.SparkMAXDriveTrain.subsystems;


import com.revrobotics.CANSparkMax;
import com.revrobotics.SparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc2130.SparkMAXDriveTrain.Robot;
import org.usfirst.frc2130.SparkMAXDriveTrain.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrainSubsystem extends Subsystem {


    //here we are defining the variables and what type they are -Cory
    //The format is first we define if anything can access them or just this subsystem, we do this by stating private or public
    //then we say what it is, this is a CANSparkMax, then we give it a name, we roll with master and slaves and define their sides
    //- Cory
    private CANSparkMax rightMotorMaster;
    private CANSparkMax rightMotorSlave;
    private CANSparkMax leftMotorMaster;
    private CANSparkMax leftMotorSlave;

    private DifferentialDrive diffydrivey;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrainSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //Here we are giving definitions to our previously named variables the format is
        //we first call the name rightMotorMaster, then say new, what it is, CANSparkMax, then we state the CAN ID and what type
        //of motor it is -Cory
        rightMotorMaster = new CANSparkMax(1, MotorType.kBrushless);
        rightMotorSlave = new CANSparkMax(2, MotorType.kBrushless);
        
        leftMotorMaster = new CANSparkMax(3, MotorType.kBrushless);
        leftMotorSlave = new CANSparkMax(4, MotorType.kBrushless);
        
        diffydrivey = new DifferentialDrive(leftMotorMaster, rightMotorMaster);

        //sorry cheif I honestly don't know -Cory
        diffydrivey.setSafetyEnabled(true);
        diffydrivey.setExpiration(0.1);
        diffydrivey.setMaxOutput(1.0);


        //Here we are setting the slaves to make it follow the master so they mirror what the master does -Cory
        leftMotorSlave.follow(leftMotorMaster);
        rightMotorSlave.follow(rightMotorMaster);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveTrainCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    /*This is a method, you start with defining what it will be, it first decides if everyone can use it or just this subsystem
    You do this by saying public or private. Then what type of return it will give, the void means it will return nothing
    then we name it that part is the driveWithDifferential. Inside the curly brakets there is what this method will do. 
    In this one it runs the four motors we defined in an arcadeDrive system by using two axis we called from the oi -Cory */

    public void driveWithDifferential(){
        diffydrivey.arcadeDrive(Robot.oi.driverJoystick.getRawAxis(1)  , Robot.oi.driverJoystick.getRawAxis(4));
    }

}


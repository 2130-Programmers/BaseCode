// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.ProxUseExample.subsystems;


import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc2130.ProxUseExample.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrainSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /*Here we are defining what aspects we are going to be using, first we decide if any subsystem can use it or just this one by
    saying public or private, the we decide what it is, in this case it is a CANSparkMax, then we give it a name -Cory */

    private CANSparkMax motor;

    //same thing here as the last but it is a DigitalInput and named prox -Cory
    private DigitalInput prox;

    public DriveTrainSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
 
    /*Here we define our previously stated aspects, first we call what we are defining by saying it's name, then we set it equals
    to a CANSparkMax, in the parenthesis we say what the can Id is and then what type of motor it is -Cory */
    motor = new CANSparkMax(0, MotorType.kBrushless);

    //The same thing would be this except it is a DigitalInput with the port ID of 0 -Cory
    prox = new DigitalInput(0);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new moveMotorBaseOnProx());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.


    /*Here we are creating a method to get the value of the prox, first we define if anything can use it or just this subsystem
    by saying public or private, then we say boolean to set the variable value to a true or false value, then we give it a name
    and in the braces we define what the method does, In this case we get the value of the prox we defined as a digital input
    and use .get to get the value of it -Cory */
    public boolean proxValue(){
        return prox.get();
    }


    /*Here we create another method to make the motor move, first we do the method definitions by public/private then the variable
    type and the name. In this definition we make an if statment, for the parameter of the if statement we put the previously made
    proxValue, that will give us a true or false, if it is true then it will set the motor to run at 100%, if it isnt true then
    the motor is set to 0% power -Cory */
    public void newMethod(){
        if(proxValue()){
            motor.set(1);
        }else{
            motor.set(0);
        }
    }

}

